<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Button_Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Button_Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="ContextMenu_Group_Delete" xml:space="preserve">
    <value>Delete this group</value>
  </data>
  <data name="ContextMenu_Group_EditGroups" xml:space="preserve">
    <value>Edit groups...</value>
  </data>
  <data name="ContextMenu_Item_Delete" xml:space="preserve">
    <value>Delete this item</value>
  </data>
  <data name="ContextMenu_Item_EditItem" xml:space="preserve">
    <value>Edit this item...</value>
  </data>
  <data name="ContextMenu_Layout_EditLayouts" xml:space="preserve">
    <value>Edit layouts...</value>
  </data>
  <data name="CornerIcon_Loading" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="CornerIcon_Name" xml:space="preserve">
    <value>Quick items</value>
  </data>
  <data name="InfoTab_Text" xml:space="preserve">
    <value>Quick items lets you put shortcuts to your inventory items anywhere on your screen.
It does this by opening your inventory, looking (without scrolling) in your inventory, finding the item, and double clicking the item.

Quick items involves 3 parts:
    1. Items. Each item corresponds to an item in your inventory.
    2. Groups. Made up of several items together. Allow easy movement of related items together. 
        Ex: group together your food and utility items together.
    3. Layouts. Made up of multiple groups. You can swap between different layouts depending on the situation. 
        Ex: PvE vs WvW layouts.

Quick start:
    0. Open the configuration window if you haven't already.
    1. Go to the 2nd on the left (Settings) and make sure the “Inventory keybind” is set as the same one you use in GW2.
    2. Go to the 3rd tab on the left (Groups). 
        Select the Default group. 
        In the “Group Items” area, click "Add item" then right click on the orange rectangle and choose “Edit this item”.
    3. In the window that pops out, type “Superior Sharpening Stone” (or any other consumable). 
        Click on the suggestion in the dropdown, then click Confirm.
    4. Click on the button “Add to Layout” on the right side of the window. 
        The group will show up in the upper left corner of your game window. 
        Drag it on your screen to where you want to place it.
    5. Close the “Quick items settings” window (clicking on items will not trigger them while the window is open).
    6. Double click on the item you added. Your inventory window should open and then close and you’ll have used the item.

Important notes:
    1. Quick items will not scroll your inventory window. 
        Make sure the item you’re using is near the top of your inventory such that it is visible without scrolling.</value>
  </data>
  <data name="ItemContextMenu_SetItem" xml:space="preserve">
    <value>Set Item</value>
  </data>
  <data name="ItemEdit_DefaultNameLabel" xml:space="preserve">
    <value>Enter item name to search</value>
  </data>
  <data name="ItemEdit_Settings_Keybind_Description" xml:space="preserve">
    <value>Optionally set a keybind to activate this item</value>
  </data>
  <data name="ItemEdit_Settings_Keybind_Name" xml:space="preserve">
    <value>Keybind</value>
  </data>
  <data name="ModuleSettings_OpenManagementWindow" xml:space="preserve">
    <value>Open configuration window</value>
  </data>
  <data name="Notification_CantFindItem" xml:space="preserve">
    <value>Can't find the item</value>
  </data>
  <data name="SettingsWindow_GroupsTabName" xml:space="preserve">
    <value>Groups</value>
  </data>
  <data name="SettingsWindow_InfoTabName" xml:space="preserve">
    <value>Info</value>
  </data>
  <data name="SettingsWindow_LayoutsTabName" xml:space="preserve">
    <value>Layouts</value>
  </data>
  <data name="SettingsWindow_SettingsTabName" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsWindow_Title" xml:space="preserve">
    <value>Quick items settings</value>
  </data>
  <data name="Settings_ActivationTrigger_Description" xml:space="preserve">
    <value>Choose what action will activate the item. Single click may result in accidential activation.</value>
  </data>
  <data name="Settings_ActivationTrigger_Name" xml:space="preserve">
    <value>Item activation trigger</value>
  </data>
  <data name="Settings_ActiveLayout_Description" xml:space="preserve">
    <value>Name of the active layout. </value>
  </data>
  <data name="Settings_ActiveLayout_Name" xml:space="preserve">
    <value>Active Layout</value>
  </data>
  <data name="Settings_InventoryKeybind_Description" xml:space="preserve">
    <value>Set this to the same keybind that you use in GW2. Default: i</value>
  </data>
  <data name="Settings_InventoryKeybind_Name" xml:space="preserve">
    <value>Inventory keybind</value>
  </data>
  <data name="Settings_OutputDebugImages_Description" xml:space="preserve">
    <value>If enabled, debug images will be written to the "debug" folder under this module's "quickitems" folder (accessed from the gears menu on the module settings page).</value>
  </data>
  <data name="Settings_OutputDebugImages_Name" xml:space="preserve">
    <value>Output debug images</value>
  </data>
  <data name="Settings_SearchAcceptThreshold_Description" xml:space="preserve">
    <value>Threshold for when an item is considered found when searching. Smaller values will have fewer false positives, but may reject valid items. Larger values will be more tolerant, but may introduce false positives.
Min: 0.01
Default: 0.10
Max: 0.20</value>
  </data>
  <data name="Settings_SearchAcceptThreshold_Name" xml:space="preserve">
    <value>Search threshold</value>
  </data>
  <data name="Settings_SearchImageScale_Description" xml:space="preserve">
    <value>Scale (as a %) down the image when searching to improve search performance. Smaller values may make the search inaccurate (fail to find the item or finds the wrong item). Larger values will make the search slower.
Min: 0.30
Default: 0.50
Max: 1.00</value>
  </data>
  <data name="Settings_SearchImageScale_Name" xml:space="preserve">
    <value>Search image scale</value>
  </data>
  <data name="Settings_SearchMode_Description" xml:space="preserve">
    <value>When searching for the item on screen, everything is converted to grayscale to improve performance. This setting changes how the item is converted to grayscale.
- ToGray: Default. Images are converted to grayscale based on how bright the image is. Works for most items as long as they have unique illustrations.
- ToGrayWithMeanHueCheck: Same as ToGray, but the result is further checked to make sure that its average hue matches the target item. Use this mode for items that have multiple other similar items and only differ by their colours (ex: Normal, Superior, Guild siege blueprints for WvW).
- RedOnly, GreenOnly, BlueOnly, YXorCrCb, HXorV: Not recommended.</value>
  </data>
  <data name="Settings_SearchMode_Name" xml:space="preserve">
    <value>Search mode</value>
  </data>
  <data name="Settings_ShowCornerIcon_Description" xml:space="preserve">
    <value>Show corner icon for quick access to the config screen in the bar in the upper left corner of the screen</value>
  </data>
  <data name="Settings_ShowCornerIcon_Name" xml:space="preserve">
    <value>Show corner icon</value>
  </data>
  <data name="Settings_ShowInCombat_Description" xml:space="preserve">
    <value>Show item icons during combat.</value>
  </data>
  <data name="Settings_ShowInCombat_Name" xml:space="preserve">
    <value>Show in combat</value>
  </data>
  <data name="Settings_ShowOnLoadingScreen_Description" xml:space="preserve">
    <value>Show item icons on loading screen, character select, and in cutscenes.</value>
  </data>
  <data name="Settings_ShowOnLoadingScreen_Name" xml:space="preserve">
    <value>Show on loading screen</value>
  </data>
  <data name="Settings_ShowOnMap_Description" xml:space="preserve">
    <value>Show item icons when the world map is open.</value>
  </data>
  <data name="Settings_ShowOnMap_Name" xml:space="preserve">
    <value>Show when map open</value>
  </data>
  <data name="Settings_WaitForInventoryOpen_Description" xml:space="preserve">
    <value>Time to wait for inventory to open before attempting to click on the item. Leave as default unless your inventory opens particularly slow.
Min: 100ms
Default: 300ms
Max: 1000ms</value>
  </data>
  <data name="Settings_WaitForInventoryOpen_Name" xml:space="preserve">
    <value>Wait for inventory open</value>
  </data>
  <data name="SettingView_CurrentValue" xml:space="preserve">
    <value>Current: </value>
  </data>
</root>